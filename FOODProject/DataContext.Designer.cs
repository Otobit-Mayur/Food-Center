//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 08-03-2022 10:17:43
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace FoodCenterContext
{

    [DatabaseAttribute(Name = "FoodCenter")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class FoodCenterDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(FoodCenterDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertAddress(Address instance);
        partial void UpdateAddress(Address instance);
        partial void DeleteAddress(Address instance);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertOfficeDetail(OfficeDetail instance);
        partial void UpdateOfficeDetail(OfficeDetail instance);
        partial void DeleteOfficeDetail(OfficeDetail instance);
        partial void InsertOrderMstr(OrderMstr instance);
        partial void UpdateOrderMstr(OrderMstr instance);
        partial void DeleteOrderMstr(OrderMstr instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        partial void InsertProductType(ProductType instance);
        partial void UpdateProductType(ProductType instance);
        partial void DeleteProductType(ProductType instance);
        partial void InsertRefreshToken(RefreshToken instance);
        partial void UpdateRefreshToken(RefreshToken instance);
        partial void DeleteRefreshToken(RefreshToken instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertShopDetail(ShopDetail instance);
        partial void UpdateShopDetail(ShopDetail instance);
        partial void DeleteShopDetail(ShopDetail instance);
        partial void InsertStatus(Status instance);
        partial void UpdateStatus(Status instance);
        partial void DeleteStatus(Status instance);
        partial void InsertTrack(Track instance);
        partial void UpdateTrack(Track instance);
        partial void DeleteTrack(Track instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);
        partial void InsertUserRefresh(UserRefresh instance);
        partial void UpdateUserRefresh(UserRefresh instance);
        partial void DeleteUserRefresh(UserRefresh instance);

        #endregion

        public FoodCenterDataContext() :
        base(@"Data Source=20.204.136.73;Initial Catalog=FoodCenter;Integrated Security=False;Persist Security Info=True;User ID=fcDB;Password=Otobit@2022@Food", mappingSource)
        {
            OnCreated();
        }

        public FoodCenterDataContext(MappingSource mappingSource) :
        base(@"Data Source=20.204.136.73;Initial Catalog=FoodCenter;Integrated Security=False;Persist Security Info=True;User ID=fcDB;Password=Otobit@2022@Food", mappingSource)
        {
            OnCreated();
        }

        public FoodCenterDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FoodCenterDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FoodCenterDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FoodCenterDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Address> Addresses
        {
            get
            {
                return this.GetTable<Address>();
            }
        }

        public Devart.Data.Linq.Table<Category> Categories
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public Devart.Data.Linq.Table<OfficeDetail> OfficeDetails
        {
            get
            {
                return this.GetTable<OfficeDetail>();
            }
        }

        public Devart.Data.Linq.Table<OrderDetail> OrderDetails
        {
            get
            {
                return this.GetTable<OrderDetail>();
            }
        }

        public Devart.Data.Linq.Table<OrderMstr> OrderMstrs
        {
            get
            {
                return this.GetTable<OrderMstr>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public Devart.Data.Linq.Table<ProductType> ProductTypes
        {
            get
            {
                return this.GetTable<ProductType>();
            }
        }

        public Devart.Data.Linq.Table<RefreshToken> RefreshTokens
        {
            get
            {
                return this.GetTable<RefreshToken>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<ShopDetail> ShopDetails
        {
            get
            {
                return this.GetTable<ShopDetail>();
            }
        }

        public Devart.Data.Linq.Table<Status> Statuses
        {
            get
            {
                return this.GetTable<Status>();
            }
        }

        public Devart.Data.Linq.Table<Track> Tracks
        {
            get
            {
                return this.GetTable<Track>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }

        public Devart.Data.Linq.Table<UserRefresh> UserRefreshes
        {
            get
            {
                return this.GetTable<UserRefresh>();
            }
        }
    }
}

namespace FoodCenterContext
{

    /// <summary>
    /// There are no comments for FoodCenterContext.Address in the schema.
    /// </summary>
    [Table(Name = @"dbo.Address")]
    public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AddressId;

        private string _Address1;

        private decimal? _Latitude;

        private decimal? _Longitude;

        private int? _ShopId;
        #pragma warning restore 0649

        private EntityRef<ShopDetail> _ShopDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAddressIdChanging(int value);
        partial void OnAddressIdChanged();
        partial void OnAddress1Changing(string value);
        partial void OnAddress1Changed();
        partial void OnLatitudeChanging(decimal? value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(decimal? value);
        partial void OnLongitudeChanged();
        partial void OnShopIdChanging(int? value);
        partial void OnShopIdChanged();
        #endregion

        public Address()
        {
            this._ShopDetail  = default(EntityRef<ShopDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AddressId in the schema.
        /// </summary>
        [Column(Storage = "_AddressId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AddressId
        {
            get
            {
                return this._AddressId;
            }
            set
            {
                if (this._AddressId != value)
                {
                    this.OnAddressIdChanging(value);
                    this.SendPropertyChanging("AddressId");
                    this._AddressId = value;
                    this.SendPropertyChanged("AddressId");
                    this.OnAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address1 in the schema.
        /// </summary>
        [Column(Name = @"Address", Storage = "_Address1", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Address1
        {
            get
            {
                return this._Address1;
            }
            set
            {
                if (this._Address1 != value)
                {
                    this.OnAddress1Changing(value);
                    this.SendPropertyChanging("Address1");
                    this._Address1 = value;
                    this.SendPropertyChanged("Address1");
                    this.OnAddress1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", DbType = "DECIMAL", UpdateCheck = UpdateCheck.Never)]
        public decimal? Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if (this._Latitude != value)
                {
                    this.OnLatitudeChanging(value);
                    this.SendPropertyChanging("Latitude");
                    this._Latitude = value;
                    this.SendPropertyChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", DbType = "DECIMAL", UpdateCheck = UpdateCheck.Never)]
        public decimal? Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if (this._Longitude != value)
                {
                    this.OnLongitudeChanging(value);
                    this.SendPropertyChanging("Longitude");
                    this._Longitude = value;
                    this.SendPropertyChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopId in the schema.
        /// </summary>
        [Column(Storage = "_ShopId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ShopId
        {
            get
            {
                return this._ShopId;
            }
            set
            {
                if (this._ShopId != value)
                {
                    if (this._ShopDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShopIdChanging(value);
                    this.SendPropertyChanging("ShopId");
                    this._ShopId = value;
                    this.SendPropertyChanged("ShopId");
                    this.OnShopIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ShopDetail_Address", Storage="_ShopDetail", ThisKey="ShopId", OtherKey="ShopId", IsForeignKey=true)]
        public ShopDetail ShopDetail
        {
            get
            {
                return this._ShopDetail.Entity;
            }
            set
            {
                ShopDetail previousValue = this._ShopDetail.Entity;
                if ((previousValue != value) || (this._ShopDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ShopDetail");
                    if (previousValue != null)
                    {
                        this._ShopDetail.Entity = null;
                        previousValue.Addresses.Remove(this);
                    }
                    this._ShopDetail.Entity = value;
                    if (value != null)
                    {
                        this._ShopId = value.ShopId;
                        value.Addresses.Add(this);
                    }
                    else
                    {
                        this._ShopId = default(int?);
                    }
                    this.SendPropertyChanged("ShopDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.Category in the schema.
    /// </summary>
    [Table(Name = @"dbo.Category")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryId;

        private string _Category1;
        #pragma warning restore 0649

        private EntitySet<ShopDetail> _ShopDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnCategory1Changing(string value);
        partial void OnCategory1Changed();
        #endregion

        public Category()
        {
            this._ShopDetails = new EntitySet<ShopDetail>(new Action<ShopDetail>(this.attach_ShopDetails), new Action<ShopDetail>(this.detach_ShopDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Storage = "_CategoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging("CategoryId");
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category1 in the schema.
        /// </summary>
        [Column(Name = @"Category", Storage = "_Category1", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Category1
        {
            get
            {
                return this._Category1;
            }
            set
            {
                if (this._Category1 != value)
                {
                    this.OnCategory1Changing(value);
                    this.SendPropertyChanging("Category1");
                    this._Category1 = value;
                    this.SendPropertyChanged("Category1");
                    this.OnCategory1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_ShopDetail", Storage="_ShopDetails", ThisKey="CategoryId", OtherKey="CategoryId", DeleteRule="NO ACTION")]
        public EntitySet<ShopDetail> ShopDetails
        {
            get
            {
                return this._ShopDetails;
            }
            set
            {
                this._ShopDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ShopDetails(ShopDetail entity)
        {
            this.SendPropertyChanging("ShopDetails");
            entity.Category = this;
        }
    
        private void detach_ShopDetails(ShopDetail entity)
        {
            this.SendPropertyChanging("ShopDetails");
            entity.Category = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.OfficeDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.OfficeDetail")]
    public partial class OfficeDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OfficeId;

        private string _Name;

        private string _Phone;

        private int? _Staff;

        private string _Image;
        #pragma warning restore 0649

        private EntitySet<OrderMstr> _OrderMstrs;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOfficeIdChanging(int value);
        partial void OnOfficeIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnStaffChanging(int? value);
        partial void OnStaffChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        #endregion

        public OfficeDetail()
        {
            this._OrderMstrs = new EntitySet<OrderMstr>(new Action<OrderMstr>(this.attach_OrderMstrs), new Action<OrderMstr>(this.detach_OrderMstrs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OfficeId in the schema.
        /// </summary>
        [Column(Storage = "_OfficeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OfficeId
        {
            get
            {
                return this._OfficeId;
            }
            set
            {
                if (this._OfficeId != value)
                {
                    this.OnOfficeIdChanging(value);
                    this.SendPropertyChanging("OfficeId");
                    this._OfficeId = value;
                    this.SendPropertyChanged("OfficeId");
                    this.OnOfficeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Storage = "_Phone", DbType = "NCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging("Phone");
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Staff in the schema.
        /// </summary>
        [Column(Storage = "_Staff", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Staff
        {
            get
            {
                return this._Staff;
            }
            set
            {
                if (this._Staff != value)
                {
                    this.OnStaffChanging(value);
                    this.SendPropertyChanging("Staff");
                    this._Staff = value;
                    this.SendPropertyChanged("Staff");
                    this.OnStaffChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Storage = "_Image", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging("Image");
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderMstrs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="OfficeDetail_OrderMstr", Storage="_OrderMstrs", ThisKey="OfficeId", OtherKey="OfficeId", DeleteRule="NO ACTION")]
        public EntitySet<OrderMstr> OrderMstrs
        {
            get
            {
                return this._OrderMstrs;
            }
            set
            {
                this._OrderMstrs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrderMstrs(OrderMstr entity)
        {
            this.SendPropertyChanging("OrderMstrs");
            entity.OfficeDetail = this;
        }
    
        private void detach_OrderMstrs(OrderMstr entity)
        {
            this.SendPropertyChanging("OrderMstrs");
            entity.OfficeDetail = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.OrderDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.OrderDetail")]
    public partial class OrderDetail
    {
        #pragma warning disable 0649

        private int? _OrderId;

        private int? _ProductId;

        private int? _Qty;

        private string _Description;

        private System.DateTime? _DateTime;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIdChanging(int? value);
        partial void OnOrderIdChanged();
        partial void OnProductIdChanging(int? value);
        partial void OnProductIdChanged();
        partial void OnQtyChanging(int? value);
        partial void OnQtyChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDateTimeChanging(System.DateTime? value);
        partial void OnDateTimeChanged();
        #endregion

        public OrderDetail()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Storage = "_OrderId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this._OrderId = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Storage = "_ProductId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this._ProductId = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Qty in the schema.
        /// </summary>
        [Column(Storage = "_Qty", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Qty
        {
            get
            {
                return this._Qty;
            }
            set
            {
                if (this._Qty != value)
                {
                    this._Qty = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this._Description = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this._DateTime = value;
                }
            }
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.OrderMstr in the schema.
    /// </summary>
    [Table(Name = @"dbo.OrderMstr")]
    public partial class OrderMstr : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderId;

        private int? _ShopId;

        private int? _OfficeId;

        private System.DateTime? _DateTime;

        private int? _Total;

        private int? _StatusId;

        private int? _TrackId;
        #pragma warning restore 0649

        private EntityRef<Status> _Status;

        private EntityRef<Track> _Track;

        private EntityRef<OfficeDetail> _OfficeDetail;

        private EntityRef<ShopDetail> _ShopDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnShopIdChanging(int? value);
        partial void OnShopIdChanged();
        partial void OnOfficeIdChanging(int? value);
        partial void OnOfficeIdChanged();
        partial void OnDateTimeChanging(System.DateTime? value);
        partial void OnDateTimeChanged();
        partial void OnTotalChanging(int? value);
        partial void OnTotalChanged();
        partial void OnStatusIdChanging(int? value);
        partial void OnStatusIdChanged();
        partial void OnTrackIdChanging(int? value);
        partial void OnTrackIdChanged();
        #endregion

        public OrderMstr()
        {
            this._Status  = default(EntityRef<Status>);
            this._Track  = default(EntityRef<Track>);
            this._OfficeDetail  = default(EntityRef<OfficeDetail>);
            this._ShopDetail  = default(EntityRef<ShopDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Storage = "_OrderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging("OrderId");
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopId in the schema.
        /// </summary>
        [Column(Storage = "_ShopId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ShopId
        {
            get
            {
                return this._ShopId;
            }
            set
            {
                if (this._ShopId != value)
                {
                    if (this._ShopDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShopIdChanging(value);
                    this.SendPropertyChanging("ShopId");
                    this._ShopId = value;
                    this.SendPropertyChanged("ShopId");
                    this.OnShopIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeId in the schema.
        /// </summary>
        [Column(Storage = "_OfficeId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OfficeId
        {
            get
            {
                return this._OfficeId;
            }
            set
            {
                if (this._OfficeId != value)
                {
                    if (this._OfficeDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOfficeIdChanging(value);
                    this.SendPropertyChanging("OfficeId");
                    this._OfficeId = value;
                    this.SendPropertyChanged("OfficeId");
                    this.OnOfficeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging("DateTime");
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Total in the schema.
        /// </summary>
        [Column(Storage = "_Total", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Total
        {
            get
            {
                return this._Total;
            }
            set
            {
                if (this._Total != value)
                {
                    this.OnTotalChanging(value);
                    this.SendPropertyChanging("Total");
                    this._Total = value;
                    this.SendPropertyChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StatusId in the schema.
        /// </summary>
        [Column(Storage = "_StatusId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? StatusId
        {
            get
            {
                return this._StatusId;
            }
            set
            {
                if (this._StatusId != value)
                {
                    if (this._Status.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStatusIdChanging(value);
                    this.SendPropertyChanging("StatusId");
                    this._StatusId = value;
                    this.SendPropertyChanged("StatusId");
                    this.OnStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TrackId in the schema.
        /// </summary>
        [Column(Storage = "_TrackId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? TrackId
        {
            get
            {
                return this._TrackId;
            }
            set
            {
                if (this._TrackId != value)
                {
                    if (this._Track.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTrackIdChanging(value);
                    this.SendPropertyChanging("TrackId");
                    this._TrackId = value;
                    this.SendPropertyChanged("TrackId");
                    this.OnTrackIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Status_OrderMstr", Storage="_Status", ThisKey="StatusId", OtherKey="StatusId", IsForeignKey=true)]
        public Status Status
        {
            get
            {
                return this._Status.Entity;
            }
            set
            {
                Status previousValue = this._Status.Entity;
                if ((previousValue != value) || (this._Status.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Status");
                    if (previousValue != null)
                    {
                        this._Status.Entity = null;
                        previousValue.OrderMstrs.Remove(this);
                    }
                    this._Status.Entity = value;
                    if (value != null)
                    {
                        this._StatusId = value.StatusId;
                        value.OrderMstrs.Add(this);
                    }
                    else
                    {
                        this._StatusId = default(int?);
                    }
                    this.SendPropertyChanged("Status");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Track in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Track_OrderMstr", Storage="_Track", ThisKey="TrackId", OtherKey="TrackId", IsForeignKey=true)]
        public Track Track
        {
            get
            {
                return this._Track.Entity;
            }
            set
            {
                Track previousValue = this._Track.Entity;
                if ((previousValue != value) || (this._Track.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Track");
                    if (previousValue != null)
                    {
                        this._Track.Entity = null;
                        previousValue.OrderMstrs.Remove(this);
                    }
                    this._Track.Entity = value;
                    if (value != null)
                    {
                        this._TrackId = value.TrackId;
                        value.OrderMstrs.Add(this);
                    }
                    else
                    {
                        this._TrackId = default(int?);
                    }
                    this.SendPropertyChanged("Track");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="OfficeDetail_OrderMstr", Storage="_OfficeDetail", ThisKey="OfficeId", OtherKey="OfficeId", IsForeignKey=true)]
        public OfficeDetail OfficeDetail
        {
            get
            {
                return this._OfficeDetail.Entity;
            }
            set
            {
                OfficeDetail previousValue = this._OfficeDetail.Entity;
                if ((previousValue != value) || (this._OfficeDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("OfficeDetail");
                    if (previousValue != null)
                    {
                        this._OfficeDetail.Entity = null;
                        previousValue.OrderMstrs.Remove(this);
                    }
                    this._OfficeDetail.Entity = value;
                    if (value != null)
                    {
                        this._OfficeId = value.OfficeId;
                        value.OrderMstrs.Add(this);
                    }
                    else
                    {
                        this._OfficeId = default(int?);
                    }
                    this.SendPropertyChanged("OfficeDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ShopDetail_OrderMstr", Storage="_ShopDetail", ThisKey="ShopId", OtherKey="ShopId", IsForeignKey=true)]
        public ShopDetail ShopDetail
        {
            get
            {
                return this._ShopDetail.Entity;
            }
            set
            {
                ShopDetail previousValue = this._ShopDetail.Entity;
                if ((previousValue != value) || (this._ShopDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ShopDetail");
                    if (previousValue != null)
                    {
                        this._ShopDetail.Entity = null;
                        previousValue.OrderMstrs.Remove(this);
                    }
                    this._ShopDetail.Entity = value;
                    if (value != null)
                    {
                        this._ShopId = value.ShopId;
                        value.OrderMstrs.Add(this);
                    }
                    else
                    {
                        this._ShopId = default(int?);
                    }
                    this.SendPropertyChanged("ShopDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.Product in the schema.
    /// </summary>
    [Table(Name = @"dbo.Product")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private string _ProductName;

        private int? _TypeId;

        private int? _Price;

        private string _Description;

        private string _Image;

        private int? _Status;
        #pragma warning restore 0649

        private EntityRef<ProductType> _ProductType;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnTypeIdChanging(int? value);
        partial void OnTypeIdChanged();
        partial void OnPriceChanging(int? value);
        partial void OnPriceChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnStatusChanging(int? value);
        partial void OnStatusChanged();
        #endregion

        public Product()
        {
            this._ProductType  = default(EntityRef<ProductType>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Storage = "_ProductId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Storage = "_ProductName", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging("ProductName");
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Storage = "_TypeId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    if (this._ProductType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging("TypeId");
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Storage = "_Price", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging("Price");
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Storage = "_Image", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging("Image");
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductType_Product", Storage="_ProductType", ThisKey="TypeId", OtherKey="TypeId", IsForeignKey=true)]
        public ProductType ProductType
        {
            get
            {
                return this._ProductType.Entity;
            }
            set
            {
                ProductType previousValue = this._ProductType.Entity;
                if ((previousValue != value) || (this._ProductType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ProductType");
                    if (previousValue != null)
                    {
                        this._ProductType.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._ProductType.Entity = value;
                    if (value != null)
                    {
                        this._TypeId = value.TypeId;
                        value.Products.Add(this);
                    }
                    else
                    {
                        this._TypeId = default(int?);
                    }
                    this.SendPropertyChanged("ProductType");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.ProductType in the schema.
    /// </summary>
    [Table(Name = @"dbo.ProductType")]
    public partial class ProductType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TypeId;

        private string _Type;
        #pragma warning restore 0649

        private EntitySet<Product> _Products;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTypeIdChanging(int value);
        partial void OnTypeIdChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public ProductType()
        {
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Storage = "_TypeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging("TypeId");
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging("Type");
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductType_Product", Storage="_Products", ThisKey="TypeId", OtherKey="TypeId", DeleteRule="NO ACTION")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.ProductType = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.ProductType = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.RefreshToken in the schema.
    /// </summary>
    [Table(Name = @"dbo.RefreshToken")]
    public partial class RefreshToken : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RefreshTokenId;

        private string _RToken;
        #pragma warning restore 0649

        private EntitySet<UserRefresh> _UserRefreshes;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRefreshTokenIdChanging(int value);
        partial void OnRefreshTokenIdChanged();
        partial void OnRTokenChanging(string value);
        partial void OnRTokenChanged();
        #endregion

        public RefreshToken()
        {
            this._UserRefreshes = new EntitySet<UserRefresh>(new Action<UserRefresh>(this.attach_UserRefreshes), new Action<UserRefresh>(this.detach_UserRefreshes));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RefreshTokenId in the schema.
        /// </summary>
        [Column(Storage = "_RefreshTokenId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RefreshTokenId
        {
            get
            {
                return this._RefreshTokenId;
            }
            set
            {
                if (this._RefreshTokenId != value)
                {
                    this.OnRefreshTokenIdChanging(value);
                    this.SendPropertyChanging("RefreshTokenId");
                    this._RefreshTokenId = value;
                    this.SendPropertyChanged("RefreshTokenId");
                    this.OnRefreshTokenIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RToken in the schema.
        /// </summary>
        [Column(Storage = "_RToken", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string RToken
        {
            get
            {
                return this._RToken;
            }
            set
            {
                if (this._RToken != value)
                {
                    this.OnRTokenChanging(value);
                    this.SendPropertyChanging("RToken");
                    this._RToken = value;
                    this.SendPropertyChanged("RToken");
                    this.OnRTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserRefreshes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RefreshToken_UserRefresh", Storage="_UserRefreshes", ThisKey="RefreshTokenId", OtherKey="RefreshTokenId", DeleteRule="NO ACTION")]
        public EntitySet<UserRefresh> UserRefreshes
        {
            get
            {
                return this._UserRefreshes;
            }
            set
            {
                this._UserRefreshes.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_UserRefreshes(UserRefresh entity)
        {
            this.SendPropertyChanging("UserRefreshes");
            entity.RefreshToken = this;
        }
    
        private void detach_UserRefreshes(UserRefresh entity)
        {
            this.SendPropertyChanging("UserRefreshes");
            entity.RefreshToken = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.Role in the schema.
    /// </summary>
    [Table(Name = @"dbo.Role")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RoleId;

        private string _Role1;
        #pragma warning restore 0649

        private EntitySet<User> _Users;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnRole1Changing(string value);
        partial void OnRole1Changed();
        #endregion

        public Role()
        {
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RoleId in the schema.
        /// </summary>
        [Column(Storage = "_RoleId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RoleId
        {
            get
            {
                return this._RoleId;
            }
            set
            {
                if (this._RoleId != value)
                {
                    this.OnRoleIdChanging(value);
                    this.SendPropertyChanging("RoleId");
                    this._RoleId = value;
                    this.SendPropertyChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Role1 in the schema.
        /// </summary>
        [Column(Name = @"Role", Storage = "_Role1", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Role1
        {
            get
            {
                return this._Role1;
            }
            set
            {
                if (this._Role1 != value)
                {
                    this.OnRole1Changing(value);
                    this.SendPropertyChanging("Role1");
                    this._Role1 = value;
                    this.SendPropertyChanged("Role1");
                    this.OnRole1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Users", ThisKey="RoleId", OtherKey="RoleId", DeleteRule="NO ACTION")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = this;
        }
    
        private void detach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.ShopDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.ShopDetail")]
    public partial class ShopDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ShopId;

        private string _ShopName;

        private decimal? _PhoneNumber;

        private decimal? _AlternateNumber;

        private int? _DeliveryRadius;

        private string _Logo;

        private int? _Status;

        private int? _UserId;

        private int? _CategoryId;
        #pragma warning restore 0649

        private EntitySet<Address> _Addresses;

        private EntitySet<OrderMstr> _OrderMstrs;

        private EntityRef<Category> _Category;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnShopIdChanging(int value);
        partial void OnShopIdChanged();
        partial void OnShopNameChanging(string value);
        partial void OnShopNameChanged();
        partial void OnPhoneNumberChanging(decimal? value);
        partial void OnPhoneNumberChanged();
        partial void OnAlternateNumberChanging(decimal? value);
        partial void OnAlternateNumberChanged();
        partial void OnDeliveryRadiusChanging(int? value);
        partial void OnDeliveryRadiusChanged();
        partial void OnLogoChanging(string value);
        partial void OnLogoChanged();
        partial void OnStatusChanging(int? value);
        partial void OnStatusChanged();
        partial void OnUserIdChanging(int? value);
        partial void OnUserIdChanged();
        partial void OnCategoryIdChanging(int? value);
        partial void OnCategoryIdChanged();
        #endregion

        public ShopDetail()
        {
            this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
            this._OrderMstrs = new EntitySet<OrderMstr>(new Action<OrderMstr>(this.attach_OrderMstrs), new Action<OrderMstr>(this.detach_OrderMstrs));
            this._Category  = default(EntityRef<Category>);
            this._User  = default(EntityRef<User>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ShopId in the schema.
        /// </summary>
        [Column(Storage = "_ShopId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ShopId
        {
            get
            {
                return this._ShopId;
            }
            set
            {
                if (this._ShopId != value)
                {
                    this.OnShopIdChanging(value);
                    this.SendPropertyChanging("ShopId");
                    this._ShopId = value;
                    this.SendPropertyChanged("ShopId");
                    this.OnShopIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopName in the schema.
        /// </summary>
        [Column(Storage = "_ShopName", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string ShopName
        {
            get
            {
                return this._ShopName;
            }
            set
            {
                if (this._ShopName != value)
                {
                    this.OnShopNameChanging(value);
                    this.SendPropertyChanging("ShopName");
                    this._ShopName = value;
                    this.SendPropertyChanged("ShopName");
                    this.OnShopNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhoneNumber in the schema.
        /// </summary>
        [Column(Storage = "_PhoneNumber", DbType = "NUMERIC", UpdateCheck = UpdateCheck.Never)]
        public decimal? PhoneNumber
        {
            get
            {
                return this._PhoneNumber;
            }
            set
            {
                if (this._PhoneNumber != value)
                {
                    this.OnPhoneNumberChanging(value);
                    this.SendPropertyChanging("PhoneNumber");
                    this._PhoneNumber = value;
                    this.SendPropertyChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AlternateNumber in the schema.
        /// </summary>
        [Column(Storage = "_AlternateNumber", DbType = "NUMERIC", UpdateCheck = UpdateCheck.Never)]
        public decimal? AlternateNumber
        {
            get
            {
                return this._AlternateNumber;
            }
            set
            {
                if (this._AlternateNumber != value)
                {
                    this.OnAlternateNumberChanging(value);
                    this.SendPropertyChanging("AlternateNumber");
                    this._AlternateNumber = value;
                    this.SendPropertyChanged("AlternateNumber");
                    this.OnAlternateNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryRadius in the schema.
        /// </summary>
        [Column(Storage = "_DeliveryRadius", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? DeliveryRadius
        {
            get
            {
                return this._DeliveryRadius;
            }
            set
            {
                if (this._DeliveryRadius != value)
                {
                    this.OnDeliveryRadiusChanging(value);
                    this.SendPropertyChanging("DeliveryRadius");
                    this._DeliveryRadius = value;
                    this.SendPropertyChanged("DeliveryRadius");
                    this.OnDeliveryRadiusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Logo in the schema.
        /// </summary>
        [Column(Storage = "_Logo", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Logo
        {
            get
            {
                return this._Logo;
            }
            set
            {
                if (this._Logo != value)
                {
                    this.OnLogoChanging(value);
                    this.SendPropertyChanging("Logo");
                    this._Logo = value;
                    this.SendPropertyChanged("Logo");
                    this.OnLogoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Storage = "_CategoryId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    if (this._Category.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging("CategoryId");
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Addresses in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ShopDetail_Address", Storage="_Addresses", ThisKey="ShopId", OtherKey="ShopId", DeleteRule="NO ACTION")]
        public EntitySet<Address> Addresses
        {
            get
            {
                return this._Addresses;
            }
            set
            {
                this._Addresses.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for OrderMstrs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ShopDetail_OrderMstr", Storage="_OrderMstrs", ThisKey="ShopId", OtherKey="ShopId", DeleteRule="NO ACTION")]
        public EntitySet<OrderMstr> OrderMstrs
        {
            get
            {
                return this._OrderMstrs;
            }
            set
            {
                this._OrderMstrs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_ShopDetail", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
        public Category Category
        {
            get
            {
                return this._Category.Entity;
            }
            set
            {
                Category previousValue = this._Category.Entity;
                if ((previousValue != value) || (this._Category.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Category");
                    if (previousValue != null)
                    {
                        this._Category.Entity = null;
                        previousValue.ShopDetails.Remove(this);
                    }
                    this._Category.Entity = value;
                    if (value != null)
                    {
                        this._CategoryId = value.CategoryId;
                        value.ShopDetails.Add(this);
                    }
                    else
                    {
                        this._CategoryId = default(int?);
                    }
                    this.SendPropertyChanged("Category");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_ShopDetail", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.ShopDetails.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._UserId = value.UserId;
                        value.ShopDetails.Add(this);
                    }
                    else
                    {
                        this._UserId = default(int?);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Addresses(Address entity)
        {
            this.SendPropertyChanging("Addresses");
            entity.ShopDetail = this;
        }
    
        private void detach_Addresses(Address entity)
        {
            this.SendPropertyChanging("Addresses");
            entity.ShopDetail = null;
        }

        private void attach_OrderMstrs(OrderMstr entity)
        {
            this.SendPropertyChanging("OrderMstrs");
            entity.ShopDetail = this;
        }
    
        private void detach_OrderMstrs(OrderMstr entity)
        {
            this.SendPropertyChanging("OrderMstrs");
            entity.ShopDetail = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.Status in the schema.
    /// </summary>
    [Table(Name = @"dbo.Status")]
    public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _StatusId;

        private string _Status1;
        #pragma warning restore 0649

        private EntitySet<OrderMstr> _OrderMstrs;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnStatusIdChanging(int value);
        partial void OnStatusIdChanged();
        partial void OnStatus1Changing(string value);
        partial void OnStatus1Changed();
        #endregion

        public Status()
        {
            this._OrderMstrs = new EntitySet<OrderMstr>(new Action<OrderMstr>(this.attach_OrderMstrs), new Action<OrderMstr>(this.detach_OrderMstrs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StatusId in the schema.
        /// </summary>
        [Column(Storage = "_StatusId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int StatusId
        {
            get
            {
                return this._StatusId;
            }
            set
            {
                if (this._StatusId != value)
                {
                    this.OnStatusIdChanging(value);
                    this.SendPropertyChanging("StatusId");
                    this._StatusId = value;
                    this.SendPropertyChanged("StatusId");
                    this.OnStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status1 in the schema.
        /// </summary>
        [Column(Name = @"Status", Storage = "_Status1", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Status1
        {
            get
            {
                return this._Status1;
            }
            set
            {
                if (this._Status1 != value)
                {
                    this.OnStatus1Changing(value);
                    this.SendPropertyChanging("Status1");
                    this._Status1 = value;
                    this.SendPropertyChanged("Status1");
                    this.OnStatus1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderMstrs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Status_OrderMstr", Storage="_OrderMstrs", ThisKey="StatusId", OtherKey="StatusId", DeleteRule="NO ACTION")]
        public EntitySet<OrderMstr> OrderMstrs
        {
            get
            {
                return this._OrderMstrs;
            }
            set
            {
                this._OrderMstrs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrderMstrs(OrderMstr entity)
        {
            this.SendPropertyChanging("OrderMstrs");
            entity.Status = this;
        }
    
        private void detach_OrderMstrs(OrderMstr entity)
        {
            this.SendPropertyChanging("OrderMstrs");
            entity.Status = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.Track in the schema.
    /// </summary>
    [Table(Name = @"dbo.Track")]
    public partial class Track : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TrackId;

        private string _Track1;
        #pragma warning restore 0649

        private EntitySet<OrderMstr> _OrderMstrs;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTrackIdChanging(int value);
        partial void OnTrackIdChanged();
        partial void OnTrack1Changing(string value);
        partial void OnTrack1Changed();
        #endregion

        public Track()
        {
            this._OrderMstrs = new EntitySet<OrderMstr>(new Action<OrderMstr>(this.attach_OrderMstrs), new Action<OrderMstr>(this.detach_OrderMstrs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TrackId in the schema.
        /// </summary>
        [Column(Storage = "_TrackId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int TrackId
        {
            get
            {
                return this._TrackId;
            }
            set
            {
                if (this._TrackId != value)
                {
                    this.OnTrackIdChanging(value);
                    this.SendPropertyChanging("TrackId");
                    this._TrackId = value;
                    this.SendPropertyChanged("TrackId");
                    this.OnTrackIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Track1 in the schema.
        /// </summary>
        [Column(Name = @"Track", Storage = "_Track1", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Track1
        {
            get
            {
                return this._Track1;
            }
            set
            {
                if (this._Track1 != value)
                {
                    this.OnTrack1Changing(value);
                    this.SendPropertyChanging("Track1");
                    this._Track1 = value;
                    this.SendPropertyChanged("Track1");
                    this.OnTrack1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderMstrs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Track_OrderMstr", Storage="_OrderMstrs", ThisKey="TrackId", OtherKey="TrackId", DeleteRule="NO ACTION")]
        public EntitySet<OrderMstr> OrderMstrs
        {
            get
            {
                return this._OrderMstrs;
            }
            set
            {
                this._OrderMstrs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrderMstrs(OrderMstr entity)
        {
            this.SendPropertyChanging("OrderMstrs");
            entity.Track = this;
        }
    
        private void detach_OrderMstrs(OrderMstr entity)
        {
            this.SendPropertyChanging("OrderMstrs");
            entity.Track = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.User in the schema.
    /// </summary>
    [Table(Name = @"dbo.[User]")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserId;

        private string _EmailId;

        private string _Password;

        private int? _RoleId;
        #pragma warning restore 0649

        private EntitySet<ShopDetail> _ShopDetails;

        private EntityRef<Role> _Role;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnEmailIdChanging(string value);
        partial void OnEmailIdChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnRoleIdChanging(int? value);
        partial void OnRoleIdChanged();
        #endregion

        public User()
        {
            this._ShopDetails = new EntitySet<ShopDetail>(new Action<ShopDetail>(this.attach_ShopDetails), new Action<ShopDetail>(this.detach_ShopDetails));
            this._Role  = default(EntityRef<Role>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmailId in the schema.
        /// </summary>
        [Column(Storage = "_EmailId", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string EmailId
        {
            get
            {
                return this._EmailId;
            }
            set
            {
                if (this._EmailId != value)
                {
                    this.OnEmailIdChanging(value);
                    this.SendPropertyChanging("EmailId");
                    this._EmailId = value;
                    this.SendPropertyChanged("EmailId");
                    this.OnEmailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Storage = "_Password", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleId in the schema.
        /// </summary>
        [Column(Storage = "_RoleId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? RoleId
        {
            get
            {
                return this._RoleId;
            }
            set
            {
                if (this._RoleId != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRoleIdChanging(value);
                    this.SendPropertyChanging("RoleId");
                    this._RoleId = value;
                    this.SendPropertyChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_ShopDetail", Storage="_ShopDetails", ThisKey="UserId", OtherKey="UserId", DeleteRule="NO ACTION")]
        public EntitySet<ShopDetail> ShopDetails
        {
            get
            {
                return this._ShopDetails;
            }
            set
            {
                this._ShopDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Role");
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.Users.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._RoleId = value.RoleId;
                        value.Users.Add(this);
                    }
                    else
                    {
                        this._RoleId = default(int?);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ShopDetails(ShopDetail entity)
        {
            this.SendPropertyChanging("ShopDetails");
            entity.User = this;
        }
    
        private void detach_ShopDetails(ShopDetail entity)
        {
            this.SendPropertyChanging("ShopDetails");
            entity.User = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.UserRefresh in the schema.
    /// </summary>
    [Table(Name = @"dbo.UserRefresh")]
    public partial class UserRefresh : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserRTokenId;

        private string _UserEmailId;

        private int? _RefreshTokenId;
        #pragma warning restore 0649

        private EntityRef<RefreshToken> _RefreshToken;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserRTokenIdChanging(int value);
        partial void OnUserRTokenIdChanged();
        partial void OnUserEmailIdChanging(string value);
        partial void OnUserEmailIdChanged();
        partial void OnRefreshTokenIdChanging(int? value);
        partial void OnRefreshTokenIdChanged();
        #endregion

        public UserRefresh()
        {
            this._RefreshToken  = default(EntityRef<RefreshToken>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserRTokenId in the schema.
        /// </summary>
        [Column(Storage = "_UserRTokenId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserRTokenId
        {
            get
            {
                return this._UserRTokenId;
            }
            set
            {
                if (this._UserRTokenId != value)
                {
                    this.OnUserRTokenIdChanging(value);
                    this.SendPropertyChanging("UserRTokenId");
                    this._UserRTokenId = value;
                    this.SendPropertyChanged("UserRTokenId");
                    this.OnUserRTokenIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserEmailId in the schema.
        /// </summary>
        [Column(Storage = "_UserEmailId", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string UserEmailId
        {
            get
            {
                return this._UserEmailId;
            }
            set
            {
                if (this._UserEmailId != value)
                {
                    this.OnUserEmailIdChanging(value);
                    this.SendPropertyChanging("UserEmailId");
                    this._UserEmailId = value;
                    this.SendPropertyChanged("UserEmailId");
                    this.OnUserEmailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RefreshTokenId in the schema.
        /// </summary>
        [Column(Storage = "_RefreshTokenId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? RefreshTokenId
        {
            get
            {
                return this._RefreshTokenId;
            }
            set
            {
                if (this._RefreshTokenId != value)
                {
                    if (this._RefreshToken.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRefreshTokenIdChanging(value);
                    this.SendPropertyChanging("RefreshTokenId");
                    this._RefreshTokenId = value;
                    this.SendPropertyChanged("RefreshTokenId");
                    this.OnRefreshTokenIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RefreshToken in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RefreshToken_UserRefresh", Storage="_RefreshToken", ThisKey="RefreshTokenId", OtherKey="RefreshTokenId", IsForeignKey=true)]
        public RefreshToken RefreshToken
        {
            get
            {
                return this._RefreshToken.Entity;
            }
            set
            {
                RefreshToken previousValue = this._RefreshToken.Entity;
                if ((previousValue != value) || (this._RefreshToken.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("RefreshToken");
                    if (previousValue != null)
                    {
                        this._RefreshToken.Entity = null;
                        previousValue.UserRefreshes.Remove(this);
                    }
                    this._RefreshToken.Entity = value;
                    if (value != null)
                    {
                        this._RefreshTokenId = value.RefreshTokenId;
                        value.UserRefreshes.Add(this);
                    }
                    else
                    {
                        this._RefreshTokenId = default(int?);
                    }
                    this.SendPropertyChanged("RefreshToken");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
