//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 23-03-2022 14:00:03
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace FoodCenterContext
{

    [DatabaseAttribute(Name = "FoodCenter")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class FoodCenterDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(FoodCenterDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertEmployee(Employee instance);
        partial void UpdateEmployee(Employee instance);
        partial void DeleteEmployee(Employee instance);
        partial void InsertFixLookUp(FixLookUp instance);
        partial void UpdateFixLookUp(FixLookUp instance);
        partial void DeleteFixLookUp(FixLookUp instance);
        partial void InsertLookUp(LookUp instance);
        partial void UpdateLookUp(LookUp instance);
        partial void DeleteLookUp(LookUp instance);
        partial void InsertOfficeAddress(OfficeAddress instance);
        partial void UpdateOfficeAddress(OfficeAddress instance);
        partial void DeleteOfficeAddress(OfficeAddress instance);
        partial void InsertOfficeDetail(OfficeDetail instance);
        partial void UpdateOfficeDetail(OfficeDetail instance);
        partial void DeleteOfficeDetail(OfficeDetail instance);
        partial void InsertOrderMstr(OrderMstr instance);
        partial void UpdateOrderMstr(OrderMstr instance);
        partial void DeleteOrderMstr(OrderMstr instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        partial void InsertProductType(ProductType instance);
        partial void UpdateProductType(ProductType instance);
        partial void DeleteProductType(ProductType instance);
        partial void InsertRefreshToken(RefreshToken instance);
        partial void UpdateRefreshToken(RefreshToken instance);
        partial void DeleteRefreshToken(RefreshToken instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertShopAddress(ShopAddress instance);
        partial void UpdateShopAddress(ShopAddress instance);
        partial void DeleteShopAddress(ShopAddress instance);
        partial void InsertShopDetail(ShopDetail instance);
        partial void UpdateShopDetail(ShopDetail instance);
        partial void DeleteShopDetail(ShopDetail instance);
        partial void InsertSubscriber(Subscriber instance);
        partial void UpdateSubscriber(Subscriber instance);
        partial void DeleteSubscriber(Subscriber instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);
        partial void InsertUserRefresh(UserRefresh instance);
        partial void UpdateUserRefresh(UserRefresh instance);
        partial void DeleteUserRefresh(UserRefresh instance);

        #endregion

        public FoodCenterDataContext() :
        base(@"Data Source=20.204.136.73;Initial Catalog=FoodCenter;Integrated Security=False;Persist Security Info=True;User ID=fcDB;Password=Otobit@2022@Food", mappingSource)
        {
            OnCreated();
        }

        public FoodCenterDataContext(MappingSource mappingSource) :
        base(@"Data Source=20.204.136.73;Initial Catalog=FoodCenter;Integrated Security=False;Persist Security Info=True;User ID=fcDB;Password=Otobit@2022@Food", mappingSource)
        {
            OnCreated();
        }

        public FoodCenterDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FoodCenterDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FoodCenterDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FoodCenterDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Category> Categories
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public Devart.Data.Linq.Table<Employee> Employees
        {
            get
            {
                return this.GetTable<Employee>();
            }
        }

        public Devart.Data.Linq.Table<FixLookUp> FixLookUps
        {
            get
            {
                return this.GetTable<FixLookUp>();
            }
        }

        public Devart.Data.Linq.Table<LookUp> LookUps
        {
            get
            {
                return this.GetTable<LookUp>();
            }
        }

        public Devart.Data.Linq.Table<OfficeAddress> OfficeAddresses
        {
            get
            {
                return this.GetTable<OfficeAddress>();
            }
        }

        public Devart.Data.Linq.Table<OfficeDetail> OfficeDetails
        {
            get
            {
                return this.GetTable<OfficeDetail>();
            }
        }

        public Devart.Data.Linq.Table<OrderDetail> OrderDetails
        {
            get
            {
                return this.GetTable<OrderDetail>();
            }
        }

        public Devart.Data.Linq.Table<OrderMstr> OrderMstrs
        {
            get
            {
                return this.GetTable<OrderMstr>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public Devart.Data.Linq.Table<ProductType> ProductTypes
        {
            get
            {
                return this.GetTable<ProductType>();
            }
        }

        public Devart.Data.Linq.Table<RefreshToken> RefreshTokens
        {
            get
            {
                return this.GetTable<RefreshToken>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<ShopAddress> ShopAddresses
        {
            get
            {
                return this.GetTable<ShopAddress>();
            }
        }

        public Devart.Data.Linq.Table<ShopDetail> ShopDetails
        {
            get
            {
                return this.GetTable<ShopDetail>();
            }
        }

        public Devart.Data.Linq.Table<Subscriber> Subscribers
        {
            get
            {
                return this.GetTable<Subscriber>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }

        public Devart.Data.Linq.Table<UserRefresh> UserRefreshes
        {
            get
            {
                return this.GetTable<UserRefresh>();
            }
        }
    }
}

namespace FoodCenterContext
{

    /// <summary>
    /// There are no comments for FoodCenterContext.Category in the schema.
    /// </summary>
    [Table(Name = @"dbo.Category")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryId;

        private string _CategoryName;
        #pragma warning restore 0649

        private EntitySet<ShopDetail> _ShopDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        #endregion

        public Category()
        {
            this._ShopDetails = new EntitySet<ShopDetail>(new Action<ShopDetail>(this.attach_ShopDetails), new Action<ShopDetail>(this.detach_ShopDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Storage = "_CategoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging("CategoryId");
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [Column(Storage = "_CategoryName", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging("CategoryName");
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_ShopDetail", Storage="_ShopDetails", ThisKey="CategoryId", OtherKey="CategoryId", DeleteRule="NO ACTION")]
        public EntitySet<ShopDetail> ShopDetails
        {
            get
            {
                return this._ShopDetails;
            }
            set
            {
                this._ShopDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ShopDetails(ShopDetail entity)
        {
            this.SendPropertyChanging("ShopDetails");
            entity.Category = this;
        }
    
        private void detach_ShopDetails(ShopDetail entity)
        {
            this.SendPropertyChanging("ShopDetails");
            entity.Category = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.Employee in the schema.
    /// </summary>
    [Table(Name = @"dbo.Employee")]
    public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _EmployeeId;

        private string _EmployeeName;

        private decimal? _PhoneNumber;

        private string _Photo;

        private int? _UserId;

        private int? _OfficeId;
        #pragma warning restore 0649

        private EntityRef<User> _User;

        private EntityRef<OfficeDetail> _OfficeDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(int value);
        partial void OnEmployeeIdChanged();
        partial void OnEmployeeNameChanging(string value);
        partial void OnEmployeeNameChanged();
        partial void OnPhoneNumberChanging(decimal? value);
        partial void OnPhoneNumberChanged();
        partial void OnPhotoChanging(string value);
        partial void OnPhotoChanged();
        partial void OnUserIdChanging(int? value);
        partial void OnUserIdChanged();
        partial void OnOfficeIdChanging(int? value);
        partial void OnOfficeIdChanged();
        #endregion

        public Employee()
        {
            this._User  = default(EntityRef<User>);
            this._OfficeDetail  = default(EntityRef<OfficeDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Storage = "_EmployeeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging("EmployeeId");
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeName in the schema.
        /// </summary>
        [Column(Storage = "_EmployeeName", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string EmployeeName
        {
            get
            {
                return this._EmployeeName;
            }
            set
            {
                if (this._EmployeeName != value)
                {
                    this.OnEmployeeNameChanging(value);
                    this.SendPropertyChanging("EmployeeName");
                    this._EmployeeName = value;
                    this.SendPropertyChanged("EmployeeName");
                    this.OnEmployeeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhoneNumber in the schema.
        /// </summary>
        [Column(Storage = "_PhoneNumber", DbType = "NUMERIC", UpdateCheck = UpdateCheck.Never)]
        public decimal? PhoneNumber
        {
            get
            {
                return this._PhoneNumber;
            }
            set
            {
                if (this._PhoneNumber != value)
                {
                    this.OnPhoneNumberChanging(value);
                    this.SendPropertyChanging("PhoneNumber");
                    this._PhoneNumber = value;
                    this.SendPropertyChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Photo in the schema.
        /// </summary>
        [Column(Storage = "_Photo", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Photo
        {
            get
            {
                return this._Photo;
            }
            set
            {
                if (this._Photo != value)
                {
                    this.OnPhotoChanging(value);
                    this.SendPropertyChanging("Photo");
                    this._Photo = value;
                    this.SendPropertyChanged("Photo");
                    this.OnPhotoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeId in the schema.
        /// </summary>
        [Column(Storage = "_OfficeId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OfficeId
        {
            get
            {
                return this._OfficeId;
            }
            set
            {
                if (this._OfficeId != value)
                {
                    if (this._OfficeDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOfficeIdChanging(value);
                    this.SendPropertyChanging("OfficeId");
                    this._OfficeId = value;
                    this.SendPropertyChanged("OfficeId");
                    this.OnOfficeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Employee", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.Employees.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._UserId = value.UserId;
                        value.Employees.Add(this);
                    }
                    else
                    {
                        this._UserId = default(int?);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="OfficeDetail_Employee", Storage="_OfficeDetail", ThisKey="OfficeId", OtherKey="OfficeId", IsForeignKey=true)]
        public OfficeDetail OfficeDetail
        {
            get
            {
                return this._OfficeDetail.Entity;
            }
            set
            {
                OfficeDetail previousValue = this._OfficeDetail.Entity;
                if ((previousValue != value) || (this._OfficeDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("OfficeDetail");
                    if (previousValue != null)
                    {
                        this._OfficeDetail.Entity = null;
                        previousValue.Employees.Remove(this);
                    }
                    this._OfficeDetail.Entity = value;
                    if (value != null)
                    {
                        this._OfficeId = value.OfficeId;
                        value.Employees.Add(this);
                    }
                    else
                    {
                        this._OfficeId = default(int?);
                    }
                    this.SendPropertyChanged("OfficeDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.FixLookUp in the schema.
    /// </summary>
    [Table(Name = @"dbo.FixLookUp")]
    public partial class FixLookUp : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _FixId;

        private string _FixName;

        private int? _LookUpId;
        #pragma warning restore 0649

        private EntityRef<LookUp> _LookUp;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnFixIdChanging(int value);
        partial void OnFixIdChanged();
        partial void OnFixNameChanging(string value);
        partial void OnFixNameChanged();
        partial void OnLookUpIdChanging(int? value);
        partial void OnLookUpIdChanged();
        #endregion

        public FixLookUp()
        {
            this._LookUp  = default(EntityRef<LookUp>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for FixId in the schema.
        /// </summary>
        [Column(Storage = "_FixId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int FixId
        {
            get
            {
                return this._FixId;
            }
            set
            {
                if (this._FixId != value)
                {
                    this.OnFixIdChanging(value);
                    this.SendPropertyChanging("FixId");
                    this._FixId = value;
                    this.SendPropertyChanged("FixId");
                    this.OnFixIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FixName in the schema.
        /// </summary>
        [Column(Storage = "_FixName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string FixName
        {
            get
            {
                return this._FixName;
            }
            set
            {
                if (this._FixName != value)
                {
                    this.OnFixNameChanging(value);
                    this.SendPropertyChanging("FixName");
                    this._FixName = value;
                    this.SendPropertyChanged("FixName");
                    this.OnFixNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LookUpId in the schema.
        /// </summary>
        [Column(Storage = "_LookUpId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? LookUpId
        {
            get
            {
                return this._LookUpId;
            }
            set
            {
                if (this._LookUpId != value)
                {
                    if (this._LookUp.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLookUpIdChanging(value);
                    this.SendPropertyChanging("LookUpId");
                    this._LookUpId = value;
                    this.SendPropertyChanged("LookUpId");
                    this.OnLookUpIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LookUp in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LookUp_FixLookUp", Storage="_LookUp", ThisKey="LookUpId", OtherKey="LookUpId", IsForeignKey=true)]
        public LookUp LookUp
        {
            get
            {
                return this._LookUp.Entity;
            }
            set
            {
                LookUp previousValue = this._LookUp.Entity;
                if ((previousValue != value) || (this._LookUp.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LookUp");
                    if (previousValue != null)
                    {
                        this._LookUp.Entity = null;
                        previousValue.FixLookUps.Remove(this);
                    }
                    this._LookUp.Entity = value;
                    if (value != null)
                    {
                        this._LookUpId = value.LookUpId;
                        value.FixLookUps.Add(this);
                    }
                    else
                    {
                        this._LookUpId = default(int?);
                    }
                    this.SendPropertyChanged("LookUp");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.LookUp in the schema.
    /// </summary>
    [Table(Name = @"dbo.LookUp")]
    public partial class LookUp : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LookUpId;

        private string _LookUpName;
        #pragma warning restore 0649

        private EntitySet<FixLookUp> _FixLookUps;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLookUpIdChanging(int value);
        partial void OnLookUpIdChanged();
        partial void OnLookUpNameChanging(string value);
        partial void OnLookUpNameChanged();
        #endregion

        public LookUp()
        {
            this._FixLookUps = new EntitySet<FixLookUp>(new Action<FixLookUp>(this.attach_FixLookUps), new Action<FixLookUp>(this.detach_FixLookUps));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LookUpId in the schema.
        /// </summary>
        [Column(Storage = "_LookUpId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int LookUpId
        {
            get
            {
                return this._LookUpId;
            }
            set
            {
                if (this._LookUpId != value)
                {
                    this.OnLookUpIdChanging(value);
                    this.SendPropertyChanging("LookUpId");
                    this._LookUpId = value;
                    this.SendPropertyChanged("LookUpId");
                    this.OnLookUpIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LookUpName in the schema.
        /// </summary>
        [Column(Storage = "_LookUpName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string LookUpName
        {
            get
            {
                return this._LookUpName;
            }
            set
            {
                if (this._LookUpName != value)
                {
                    this.OnLookUpNameChanging(value);
                    this.SendPropertyChanging("LookUpName");
                    this._LookUpName = value;
                    this.SendPropertyChanged("LookUpName");
                    this.OnLookUpNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FixLookUps in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LookUp_FixLookUp", Storage="_FixLookUps", ThisKey="LookUpId", OtherKey="LookUpId", DeleteRule="NO ACTION")]
        public EntitySet<FixLookUp> FixLookUps
        {
            get
            {
                return this._FixLookUps;
            }
            set
            {
                this._FixLookUps.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_FixLookUps(FixLookUp entity)
        {
            this.SendPropertyChanging("FixLookUps");
            entity.LookUp = this;
        }
    
        private void detach_FixLookUps(FixLookUp entity)
        {
            this.SendPropertyChanging("FixLookUps");
            entity.LookUp = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.OfficeAddress in the schema.
    /// </summary>
    [Table(Name = @"dbo.OfficeAddress")]
    public partial class OfficeAddress : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AddressId;

        private string _AddressLine;

        private decimal? _Latitude;

        private decimal? _Longitude;

        private int? _OfficeId;
        #pragma warning restore 0649

        private EntityRef<OfficeDetail> _OfficeDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAddressIdChanging(int value);
        partial void OnAddressIdChanged();
        partial void OnAddressLineChanging(string value);
        partial void OnAddressLineChanged();
        partial void OnLatitudeChanging(decimal? value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(decimal? value);
        partial void OnLongitudeChanged();
        partial void OnOfficeIdChanging(int? value);
        partial void OnOfficeIdChanged();
        #endregion

        public OfficeAddress()
        {
            this._OfficeDetail  = default(EntityRef<OfficeDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AddressId in the schema.
        /// </summary>
        [Column(Storage = "_AddressId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AddressId
        {
            get
            {
                return this._AddressId;
            }
            set
            {
                if (this._AddressId != value)
                {
                    this.OnAddressIdChanging(value);
                    this.SendPropertyChanging("AddressId");
                    this._AddressId = value;
                    this.SendPropertyChanged("AddressId");
                    this.OnAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressLine in the schema.
        /// </summary>
        [Column(Storage = "_AddressLine", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string AddressLine
        {
            get
            {
                return this._AddressLine;
            }
            set
            {
                if (this._AddressLine != value)
                {
                    this.OnAddressLineChanging(value);
                    this.SendPropertyChanging("AddressLine");
                    this._AddressLine = value;
                    this.SendPropertyChanged("AddressLine");
                    this.OnAddressLineChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", DbType = "DECIMAL(18,15)", UpdateCheck = UpdateCheck.Never)]
        public decimal? Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if (this._Latitude != value)
                {
                    this.OnLatitudeChanging(value);
                    this.SendPropertyChanging("Latitude");
                    this._Latitude = value;
                    this.SendPropertyChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", DbType = "DECIMAL(18,15)", UpdateCheck = UpdateCheck.Never)]
        public decimal? Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if (this._Longitude != value)
                {
                    this.OnLongitudeChanging(value);
                    this.SendPropertyChanging("Longitude");
                    this._Longitude = value;
                    this.SendPropertyChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeId in the schema.
        /// </summary>
        [Column(Storage = "_OfficeId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OfficeId
        {
            get
            {
                return this._OfficeId;
            }
            set
            {
                if (this._OfficeId != value)
                {
                    if (this._OfficeDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOfficeIdChanging(value);
                    this.SendPropertyChanging("OfficeId");
                    this._OfficeId = value;
                    this.SendPropertyChanged("OfficeId");
                    this.OnOfficeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="OfficeDetail_OfficeAddress", Storage="_OfficeDetail", ThisKey="OfficeId", OtherKey="OfficeId", IsForeignKey=true)]
        public OfficeDetail OfficeDetail
        {
            get
            {
                return this._OfficeDetail.Entity;
            }
            set
            {
                OfficeDetail previousValue = this._OfficeDetail.Entity;
                if ((previousValue != value) || (this._OfficeDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("OfficeDetail");
                    if (previousValue != null)
                    {
                        this._OfficeDetail.Entity = null;
                        previousValue.OfficeAddresses.Remove(this);
                    }
                    this._OfficeDetail.Entity = value;
                    if (value != null)
                    {
                        this._OfficeId = value.OfficeId;
                        value.OfficeAddresses.Add(this);
                    }
                    else
                    {
                        this._OfficeId = default(int?);
                    }
                    this.SendPropertyChanged("OfficeDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.OfficeDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.OfficeDetail")]
    public partial class OfficeDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OfficeId;

        private string _OfficeName;

        private string _ManagerName;

        private decimal _PhoneNumber;

        private decimal? _AlternateNumber;

        private int? _Staff;

        private string _Image;

        private string _CoverPhoto;

        private string _Description;

        private int? _UserId;
        #pragma warning restore 0649

        private EntitySet<Employee> _Employees;

        private EntitySet<OfficeAddress> _OfficeAddresses;

        private EntityRef<User> _User;

        private EntitySet<OrderMstr> _OrderMstrs;

        private EntitySet<Subscriber> _Subscribers;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOfficeIdChanging(int value);
        partial void OnOfficeIdChanged();
        partial void OnOfficeNameChanging(string value);
        partial void OnOfficeNameChanged();
        partial void OnManagerNameChanging(string value);
        partial void OnManagerNameChanged();
        partial void OnPhoneNumberChanging(decimal value);
        partial void OnPhoneNumberChanged();
        partial void OnAlternateNumberChanging(decimal? value);
        partial void OnAlternateNumberChanged();
        partial void OnStaffChanging(int? value);
        partial void OnStaffChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnCoverPhotoChanging(string value);
        partial void OnCoverPhotoChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnUserIdChanging(int? value);
        partial void OnUserIdChanged();
        #endregion

        public OfficeDetail()
        {
            this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
            this._OfficeAddresses = new EntitySet<OfficeAddress>(new Action<OfficeAddress>(this.attach_OfficeAddresses), new Action<OfficeAddress>(this.detach_OfficeAddresses));
            this._User  = default(EntityRef<User>);
            this._OrderMstrs = new EntitySet<OrderMstr>(new Action<OrderMstr>(this.attach_OrderMstrs), new Action<OrderMstr>(this.detach_OrderMstrs));
            this._Subscribers = new EntitySet<Subscriber>(new Action<Subscriber>(this.attach_Subscribers), new Action<Subscriber>(this.detach_Subscribers));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OfficeId in the schema.
        /// </summary>
        [Column(Storage = "_OfficeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OfficeId
        {
            get
            {
                return this._OfficeId;
            }
            set
            {
                if (this._OfficeId != value)
                {
                    this.OnOfficeIdChanging(value);
                    this.SendPropertyChanging("OfficeId");
                    this._OfficeId = value;
                    this.SendPropertyChanged("OfficeId");
                    this.OnOfficeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeName in the schema.
        /// </summary>
        [Column(Storage = "_OfficeName", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string OfficeName
        {
            get
            {
                return this._OfficeName;
            }
            set
            {
                if (this._OfficeName != value)
                {
                    this.OnOfficeNameChanging(value);
                    this.SendPropertyChanging("OfficeName");
                    this._OfficeName = value;
                    this.SendPropertyChanged("OfficeName");
                    this.OnOfficeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManagerName in the schema.
        /// </summary>
        [Column(Storage = "_ManagerName", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string ManagerName
        {
            get
            {
                return this._ManagerName;
            }
            set
            {
                if (this._ManagerName != value)
                {
                    this.OnManagerNameChanging(value);
                    this.SendPropertyChanging("ManagerName");
                    this._ManagerName = value;
                    this.SendPropertyChanged("ManagerName");
                    this.OnManagerNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhoneNumber in the schema.
        /// </summary>
        [Column(Storage = "_PhoneNumber", CanBeNull = false, DbType = "NUMERIC NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal PhoneNumber
        {
            get
            {
                return this._PhoneNumber;
            }
            set
            {
                if (this._PhoneNumber != value)
                {
                    this.OnPhoneNumberChanging(value);
                    this.SendPropertyChanging("PhoneNumber");
                    this._PhoneNumber = value;
                    this.SendPropertyChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AlternateNumber in the schema.
        /// </summary>
        [Column(Storage = "_AlternateNumber", DbType = "NUMERIC", UpdateCheck = UpdateCheck.Never)]
        public decimal? AlternateNumber
        {
            get
            {
                return this._AlternateNumber;
            }
            set
            {
                if (this._AlternateNumber != value)
                {
                    this.OnAlternateNumberChanging(value);
                    this.SendPropertyChanging("AlternateNumber");
                    this._AlternateNumber = value;
                    this.SendPropertyChanged("AlternateNumber");
                    this.OnAlternateNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Staff in the schema.
        /// </summary>
        [Column(Storage = "_Staff", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Staff
        {
            get
            {
                return this._Staff;
            }
            set
            {
                if (this._Staff != value)
                {
                    this.OnStaffChanging(value);
                    this.SendPropertyChanging("Staff");
                    this._Staff = value;
                    this.SendPropertyChanged("Staff");
                    this.OnStaffChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Storage = "_Image", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging("Image");
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CoverPhoto in the schema.
        /// </summary>
        [Column(Storage = "_CoverPhoto", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string CoverPhoto
        {
            get
            {
                return this._CoverPhoto;
            }
            set
            {
                if (this._CoverPhoto != value)
                {
                    this.OnCoverPhotoChanging(value);
                    this.SendPropertyChanging("CoverPhoto");
                    this._CoverPhoto = value;
                    this.SendPropertyChanged("CoverPhoto");
                    this.OnCoverPhotoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="OfficeDetail_Employee", Storage="_Employees", ThisKey="OfficeId", OtherKey="OfficeId", DeleteRule="NO ACTION")]
        public EntitySet<Employee> Employees
        {
            get
            {
                return this._Employees;
            }
            set
            {
                this._Employees.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeAddresses in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="OfficeDetail_OfficeAddress", Storage="_OfficeAddresses", ThisKey="OfficeId", OtherKey="OfficeId", DeleteRule="NO ACTION")]
        public EntitySet<OfficeAddress> OfficeAddresses
        {
            get
            {
                return this._OfficeAddresses;
            }
            set
            {
                this._OfficeAddresses.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_OfficeDetail", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.OfficeDetails.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._UserId = value.UserId;
                        value.OfficeDetails.Add(this);
                    }
                    else
                    {
                        this._UserId = default(int?);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderMstrs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="OfficeDetail_OrderMstr", Storage="_OrderMstrs", ThisKey="OfficeId", OtherKey="OfficeId", DeleteRule="NO ACTION")]
        public EntitySet<OrderMstr> OrderMstrs
        {
            get
            {
                return this._OrderMstrs;
            }
            set
            {
                this._OrderMstrs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Subscribers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="OfficeDetail_Subscriber", Storage="_Subscribers", ThisKey="OfficeId", OtherKey="OfficeId", DeleteRule="NO ACTION")]
        public EntitySet<Subscriber> Subscribers
        {
            get
            {
                return this._Subscribers;
            }
            set
            {
                this._Subscribers.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Employees(Employee entity)
        {
            this.SendPropertyChanging("Employees");
            entity.OfficeDetail = this;
        }
    
        private void detach_Employees(Employee entity)
        {
            this.SendPropertyChanging("Employees");
            entity.OfficeDetail = null;
        }

        private void attach_OfficeAddresses(OfficeAddress entity)
        {
            this.SendPropertyChanging("OfficeAddresses");
            entity.OfficeDetail = this;
        }
    
        private void detach_OfficeAddresses(OfficeAddress entity)
        {
            this.SendPropertyChanging("OfficeAddresses");
            entity.OfficeDetail = null;
        }

        private void attach_OrderMstrs(OrderMstr entity)
        {
            this.SendPropertyChanging("OrderMstrs");
            entity.OfficeDetail = this;
        }
    
        private void detach_OrderMstrs(OrderMstr entity)
        {
            this.SendPropertyChanging("OrderMstrs");
            entity.OfficeDetail = null;
        }

        private void attach_Subscribers(Subscriber entity)
        {
            this.SendPropertyChanging("Subscribers");
            entity.OfficeDetail = this;
        }
    
        private void detach_Subscribers(Subscriber entity)
        {
            this.SendPropertyChanging("Subscribers");
            entity.OfficeDetail = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.OrderDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.OrderDetail")]
    public partial class OrderDetail
    {
        #pragma warning disable 0649

        private int? _OrderId;

        private int? _ProductId;

        private int? _Qty;

        private string _Description;

        private System.DateTime? _OrderTime;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIdChanging(int? value);
        partial void OnOrderIdChanged();
        partial void OnProductIdChanging(int? value);
        partial void OnProductIdChanged();
        partial void OnQtyChanging(int? value);
        partial void OnQtyChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnOrderTimeChanging(System.DateTime? value);
        partial void OnOrderTimeChanged();
        #endregion

        public OrderDetail()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Storage = "_OrderId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this._OrderId = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Storage = "_ProductId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this._ProductId = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Qty in the schema.
        /// </summary>
        [Column(Storage = "_Qty", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Qty
        {
            get
            {
                return this._Qty;
            }
            set
            {
                if (this._Qty != value)
                {
                    this._Qty = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this._Description = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderTime in the schema.
        /// </summary>
        [Column(Storage = "_OrderTime", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? OrderTime
        {
            get
            {
                return this._OrderTime;
            }
            set
            {
                if (this._OrderTime != value)
                {
                    this._OrderTime = value;
                }
            }
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.OrderMstr in the schema.
    /// </summary>
    [Table(Name = @"dbo.OrderMstr")]
    public partial class OrderMstr : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrderId;

        private int? _ShopId;

        private int? _OfficeId;

        private System.DateTime? _AcceptTime;

        private int? _Total;

        private string _Status;

        private string _Track;

        private System.DateTime? _DeliveryTime;
        #pragma warning restore 0649

        private EntityRef<OfficeDetail> _OfficeDetail;

        private EntityRef<ShopDetail> _ShopDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        partial void OnShopIdChanging(int? value);
        partial void OnShopIdChanged();
        partial void OnOfficeIdChanging(int? value);
        partial void OnOfficeIdChanged();
        partial void OnAcceptTimeChanging(System.DateTime? value);
        partial void OnAcceptTimeChanged();
        partial void OnTotalChanging(int? value);
        partial void OnTotalChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTrackChanging(string value);
        partial void OnTrackChanged();
        partial void OnDeliveryTimeChanging(System.DateTime? value);
        partial void OnDeliveryTimeChanged();
        #endregion

        public OrderMstr()
        {
            this._OfficeDetail  = default(EntityRef<OfficeDetail>);
            this._ShopDetail  = default(EntityRef<ShopDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Storage = "_OrderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging("OrderId");
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopId in the schema.
        /// </summary>
        [Column(Storage = "_ShopId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ShopId
        {
            get
            {
                return this._ShopId;
            }
            set
            {
                if (this._ShopId != value)
                {
                    if (this._ShopDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShopIdChanging(value);
                    this.SendPropertyChanging("ShopId");
                    this._ShopId = value;
                    this.SendPropertyChanged("ShopId");
                    this.OnShopIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeId in the schema.
        /// </summary>
        [Column(Storage = "_OfficeId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OfficeId
        {
            get
            {
                return this._OfficeId;
            }
            set
            {
                if (this._OfficeId != value)
                {
                    if (this._OfficeDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOfficeIdChanging(value);
                    this.SendPropertyChanging("OfficeId");
                    this._OfficeId = value;
                    this.SendPropertyChanged("OfficeId");
                    this.OnOfficeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcceptTime in the schema.
        /// </summary>
        [Column(Storage = "_AcceptTime", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? AcceptTime
        {
            get
            {
                return this._AcceptTime;
            }
            set
            {
                if (this._AcceptTime != value)
                {
                    this.OnAcceptTimeChanging(value);
                    this.SendPropertyChanging("AcceptTime");
                    this._AcceptTime = value;
                    this.SendPropertyChanged("AcceptTime");
                    this.OnAcceptTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Total in the schema.
        /// </summary>
        [Column(Storage = "_Total", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Total
        {
            get
            {
                return this._Total;
            }
            set
            {
                if (this._Total != value)
                {
                    this.OnTotalChanging(value);
                    this.SendPropertyChanging("Total");
                    this._Total = value;
                    this.SendPropertyChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Track in the schema.
        /// </summary>
        [Column(Storage = "_Track", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Track
        {
            get
            {
                return this._Track;
            }
            set
            {
                if (this._Track != value)
                {
                    this.OnTrackChanging(value);
                    this.SendPropertyChanging("Track");
                    this._Track = value;
                    this.SendPropertyChanged("Track");
                    this.OnTrackChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryTime in the schema.
        /// </summary>
        [Column(Storage = "_DeliveryTime", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DeliveryTime
        {
            get
            {
                return this._DeliveryTime;
            }
            set
            {
                if (this._DeliveryTime != value)
                {
                    this.OnDeliveryTimeChanging(value);
                    this.SendPropertyChanging("DeliveryTime");
                    this._DeliveryTime = value;
                    this.SendPropertyChanged("DeliveryTime");
                    this.OnDeliveryTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="OfficeDetail_OrderMstr", Storage="_OfficeDetail", ThisKey="OfficeId", OtherKey="OfficeId", IsForeignKey=true)]
        public OfficeDetail OfficeDetail
        {
            get
            {
                return this._OfficeDetail.Entity;
            }
            set
            {
                OfficeDetail previousValue = this._OfficeDetail.Entity;
                if ((previousValue != value) || (this._OfficeDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("OfficeDetail");
                    if (previousValue != null)
                    {
                        this._OfficeDetail.Entity = null;
                        previousValue.OrderMstrs.Remove(this);
                    }
                    this._OfficeDetail.Entity = value;
                    if (value != null)
                    {
                        this._OfficeId = value.OfficeId;
                        value.OrderMstrs.Add(this);
                    }
                    else
                    {
                        this._OfficeId = default(int?);
                    }
                    this.SendPropertyChanged("OfficeDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ShopDetail_OrderMstr", Storage="_ShopDetail", ThisKey="ShopId", OtherKey="ShopId", IsForeignKey=true)]
        public ShopDetail ShopDetail
        {
            get
            {
                return this._ShopDetail.Entity;
            }
            set
            {
                ShopDetail previousValue = this._ShopDetail.Entity;
                if ((previousValue != value) || (this._ShopDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ShopDetail");
                    if (previousValue != null)
                    {
                        this._ShopDetail.Entity = null;
                        previousValue.OrderMstrs.Remove(this);
                    }
                    this._ShopDetail.Entity = value;
                    if (value != null)
                    {
                        this._ShopId = value.ShopId;
                        value.OrderMstrs.Add(this);
                    }
                    else
                    {
                        this._ShopId = default(int?);
                    }
                    this.SendPropertyChanged("ShopDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.Product in the schema.
    /// </summary>
    [Table(Name = @"dbo.Product")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private string _ProductName;

        private int? _TypeId;

        private int? _Price;

        private string _Description;

        private string _Image;

        private int? _Status;

        private string _FoodType;
        #pragma warning restore 0649

        private EntityRef<ProductType> _ProductType;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnTypeIdChanging(int? value);
        partial void OnTypeIdChanged();
        partial void OnPriceChanging(int? value);
        partial void OnPriceChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnStatusChanging(int? value);
        partial void OnStatusChanged();
        partial void OnFoodTypeChanging(string value);
        partial void OnFoodTypeChanged();
        #endregion

        public Product()
        {
            this._ProductType  = default(EntityRef<ProductType>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Storage = "_ProductId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Storage = "_ProductName", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging("ProductName");
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Storage = "_TypeId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    if (this._ProductType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging("TypeId");
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Storage = "_Price", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging("Price");
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Storage = "_Image", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging("Image");
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FoodType in the schema.
        /// </summary>
        [Column(Storage = "_FoodType", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string FoodType
        {
            get
            {
                return this._FoodType;
            }
            set
            {
                if (this._FoodType != value)
                {
                    this.OnFoodTypeChanging(value);
                    this.SendPropertyChanging("FoodType");
                    this._FoodType = value;
                    this.SendPropertyChanged("FoodType");
                    this.OnFoodTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductType_Product", Storage="_ProductType", ThisKey="TypeId", OtherKey="TypeId", IsForeignKey=true)]
        public ProductType ProductType
        {
            get
            {
                return this._ProductType.Entity;
            }
            set
            {
                ProductType previousValue = this._ProductType.Entity;
                if ((previousValue != value) || (this._ProductType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ProductType");
                    if (previousValue != null)
                    {
                        this._ProductType.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._ProductType.Entity = value;
                    if (value != null)
                    {
                        this._TypeId = value.TypeId;
                        value.Products.Add(this);
                    }
                    else
                    {
                        this._TypeId = default(int?);
                    }
                    this.SendPropertyChanged("ProductType");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.ProductType in the schema.
    /// </summary>
    [Table(Name = @"dbo.ProductType")]
    public partial class ProductType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TypeId;

        private string _Type;

        private int? _ShopId;
        #pragma warning restore 0649

        private EntitySet<Product> _Products;

        private EntityRef<ShopDetail> _ShopDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTypeIdChanging(int value);
        partial void OnTypeIdChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnShopIdChanging(int? value);
        partial void OnShopIdChanged();
        #endregion

        public ProductType()
        {
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            this._ShopDetail  = default(EntityRef<ShopDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Storage = "_TypeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging("TypeId");
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging("Type");
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopId in the schema.
        /// </summary>
        [Column(Storage = "_ShopId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ShopId
        {
            get
            {
                return this._ShopId;
            }
            set
            {
                if (this._ShopId != value)
                {
                    if (this._ShopDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShopIdChanging(value);
                    this.SendPropertyChanging("ShopId");
                    this._ShopId = value;
                    this.SendPropertyChanged("ShopId");
                    this.OnShopIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductType_Product", Storage="_Products", ThisKey="TypeId", OtherKey="TypeId", DeleteRule="NO ACTION")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ShopDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ShopDetail_ProductType", Storage="_ShopDetail", ThisKey="ShopId", OtherKey="ShopId", IsForeignKey=true)]
        public ShopDetail ShopDetail
        {
            get
            {
                return this._ShopDetail.Entity;
            }
            set
            {
                ShopDetail previousValue = this._ShopDetail.Entity;
                if ((previousValue != value) || (this._ShopDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ShopDetail");
                    if (previousValue != null)
                    {
                        this._ShopDetail.Entity = null;
                        previousValue.ProductTypes.Remove(this);
                    }
                    this._ShopDetail.Entity = value;
                    if (value != null)
                    {
                        this._ShopId = value.ShopId;
                        value.ProductTypes.Add(this);
                    }
                    else
                    {
                        this._ShopId = default(int?);
                    }
                    this.SendPropertyChanged("ShopDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.ProductType = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.ProductType = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.RefreshToken in the schema.
    /// </summary>
    [Table(Name = @"dbo.RefreshToken")]
    public partial class RefreshToken : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RefreshTokenId;

        private string _RToken;
        #pragma warning restore 0649

        private EntitySet<UserRefresh> _UserRefreshes;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRefreshTokenIdChanging(int value);
        partial void OnRefreshTokenIdChanged();
        partial void OnRTokenChanging(string value);
        partial void OnRTokenChanged();
        #endregion

        public RefreshToken()
        {
            this._UserRefreshes = new EntitySet<UserRefresh>(new Action<UserRefresh>(this.attach_UserRefreshes), new Action<UserRefresh>(this.detach_UserRefreshes));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RefreshTokenId in the schema.
        /// </summary>
        [Column(Storage = "_RefreshTokenId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RefreshTokenId
        {
            get
            {
                return this._RefreshTokenId;
            }
            set
            {
                if (this._RefreshTokenId != value)
                {
                    this.OnRefreshTokenIdChanging(value);
                    this.SendPropertyChanging("RefreshTokenId");
                    this._RefreshTokenId = value;
                    this.SendPropertyChanged("RefreshTokenId");
                    this.OnRefreshTokenIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RToken in the schema.
        /// </summary>
        [Column(Storage = "_RToken", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string RToken
        {
            get
            {
                return this._RToken;
            }
            set
            {
                if (this._RToken != value)
                {
                    this.OnRTokenChanging(value);
                    this.SendPropertyChanging("RToken");
                    this._RToken = value;
                    this.SendPropertyChanged("RToken");
                    this.OnRTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserRefreshes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RefreshToken_UserRefresh", Storage="_UserRefreshes", ThisKey="RefreshTokenId", OtherKey="RefreshTokenId", DeleteRule="NO ACTION")]
        public EntitySet<UserRefresh> UserRefreshes
        {
            get
            {
                return this._UserRefreshes;
            }
            set
            {
                this._UserRefreshes.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_UserRefreshes(UserRefresh entity)
        {
            this.SendPropertyChanging("UserRefreshes");
            entity.RefreshToken = this;
        }
    
        private void detach_UserRefreshes(UserRefresh entity)
        {
            this.SendPropertyChanging("UserRefreshes");
            entity.RefreshToken = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.Role in the schema.
    /// </summary>
    [Table(Name = @"dbo.Role")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RoleId;

        private string _RoleName;
        #pragma warning restore 0649

        private EntitySet<User> _Users;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnRoleNameChanging(string value);
        partial void OnRoleNameChanged();
        #endregion

        public Role()
        {
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RoleId in the schema.
        /// </summary>
        [Column(Storage = "_RoleId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RoleId
        {
            get
            {
                return this._RoleId;
            }
            set
            {
                if (this._RoleId != value)
                {
                    this.OnRoleIdChanging(value);
                    this.SendPropertyChanging("RoleId");
                    this._RoleId = value;
                    this.SendPropertyChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleName in the schema.
        /// </summary>
        [Column(Storage = "_RoleName", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string RoleName
        {
            get
            {
                return this._RoleName;
            }
            set
            {
                if (this._RoleName != value)
                {
                    this.OnRoleNameChanging(value);
                    this.SendPropertyChanging("RoleName");
                    this._RoleName = value;
                    this.SendPropertyChanged("RoleName");
                    this.OnRoleNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Users", ThisKey="RoleId", OtherKey="RoleId", DeleteRule="NO ACTION")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = this;
        }
    
        private void detach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.ShopAddress in the schema.
    /// </summary>
    [Table(Name = @"dbo.ShopAddress")]
    public partial class ShopAddress : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AddressId;

        private string _AddressLine;

        private decimal? _Latitude;

        private decimal? _Longitude;

        private int? _ShopId;
        #pragma warning restore 0649

        private EntityRef<ShopDetail> _ShopDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAddressIdChanging(int value);
        partial void OnAddressIdChanged();
        partial void OnAddressLineChanging(string value);
        partial void OnAddressLineChanged();
        partial void OnLatitudeChanging(decimal? value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(decimal? value);
        partial void OnLongitudeChanged();
        partial void OnShopIdChanging(int? value);
        partial void OnShopIdChanged();
        #endregion

        public ShopAddress()
        {
            this._ShopDetail  = default(EntityRef<ShopDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AddressId in the schema.
        /// </summary>
        [Column(Storage = "_AddressId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AddressId
        {
            get
            {
                return this._AddressId;
            }
            set
            {
                if (this._AddressId != value)
                {
                    this.OnAddressIdChanging(value);
                    this.SendPropertyChanging("AddressId");
                    this._AddressId = value;
                    this.SendPropertyChanged("AddressId");
                    this.OnAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressLine in the schema.
        /// </summary>
        [Column(Storage = "_AddressLine", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string AddressLine
        {
            get
            {
                return this._AddressLine;
            }
            set
            {
                if (this._AddressLine != value)
                {
                    this.OnAddressLineChanging(value);
                    this.SendPropertyChanging("AddressLine");
                    this._AddressLine = value;
                    this.SendPropertyChanged("AddressLine");
                    this.OnAddressLineChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", DbType = "DECIMAL(18,15)", UpdateCheck = UpdateCheck.Never)]
        public decimal? Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if (this._Latitude != value)
                {
                    this.OnLatitudeChanging(value);
                    this.SendPropertyChanging("Latitude");
                    this._Latitude = value;
                    this.SendPropertyChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", DbType = "DECIMAL(18,15)", UpdateCheck = UpdateCheck.Never)]
        public decimal? Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if (this._Longitude != value)
                {
                    this.OnLongitudeChanging(value);
                    this.SendPropertyChanging("Longitude");
                    this._Longitude = value;
                    this.SendPropertyChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopId in the schema.
        /// </summary>
        [Column(Storage = "_ShopId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ShopId
        {
            get
            {
                return this._ShopId;
            }
            set
            {
                if (this._ShopId != value)
                {
                    if (this._ShopDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShopIdChanging(value);
                    this.SendPropertyChanging("ShopId");
                    this._ShopId = value;
                    this.SendPropertyChanged("ShopId");
                    this.OnShopIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ShopDetail_ShopAddress", Storage="_ShopDetail", ThisKey="ShopId", OtherKey="ShopId", IsForeignKey=true)]
        public ShopDetail ShopDetail
        {
            get
            {
                return this._ShopDetail.Entity;
            }
            set
            {
                ShopDetail previousValue = this._ShopDetail.Entity;
                if ((previousValue != value) || (this._ShopDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ShopDetail");
                    if (previousValue != null)
                    {
                        this._ShopDetail.Entity = null;
                        previousValue.ShopAddresses.Remove(this);
                    }
                    this._ShopDetail.Entity = value;
                    if (value != null)
                    {
                        this._ShopId = value.ShopId;
                        value.ShopAddresses.Add(this);
                    }
                    else
                    {
                        this._ShopId = default(int?);
                    }
                    this.SendPropertyChanged("ShopDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.ShopDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.ShopDetail")]
    public partial class ShopDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ShopId;

        private string _ShopName;

        private decimal? _PhoneNumber;

        private decimal? _AlternateNumber;

        private int? _DeliveryRadius;

        private string _Logo;

        private string _CoverPhoto;

        private string _Description;

        private int? _Status;

        private int? _UserId;

        private int? _CategoryId;

        private int? _IsCompleted;
        #pragma warning restore 0649

        private EntityRef<Category> _Category;

        private EntitySet<OrderMstr> _OrderMstrs;

        private EntitySet<ProductType> _ProductTypes;

        private EntitySet<ShopAddress> _ShopAddresses;

        private EntityRef<User> _User;

        private EntitySet<Subscriber> _Subscribers;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnShopIdChanging(int value);
        partial void OnShopIdChanged();
        partial void OnShopNameChanging(string value);
        partial void OnShopNameChanged();
        partial void OnPhoneNumberChanging(decimal? value);
        partial void OnPhoneNumberChanged();
        partial void OnAlternateNumberChanging(decimal? value);
        partial void OnAlternateNumberChanged();
        partial void OnDeliveryRadiusChanging(int? value);
        partial void OnDeliveryRadiusChanged();
        partial void OnLogoChanging(string value);
        partial void OnLogoChanged();
        partial void OnCoverPhotoChanging(string value);
        partial void OnCoverPhotoChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnStatusChanging(int? value);
        partial void OnStatusChanged();
        partial void OnUserIdChanging(int? value);
        partial void OnUserIdChanged();
        partial void OnCategoryIdChanging(int? value);
        partial void OnCategoryIdChanged();
        partial void OnIsCompletedChanging(int? value);
        partial void OnIsCompletedChanged();
        #endregion

        public ShopDetail()
        {
            this._Category  = default(EntityRef<Category>);
            this._OrderMstrs = new EntitySet<OrderMstr>(new Action<OrderMstr>(this.attach_OrderMstrs), new Action<OrderMstr>(this.detach_OrderMstrs));
            this._ProductTypes = new EntitySet<ProductType>(new Action<ProductType>(this.attach_ProductTypes), new Action<ProductType>(this.detach_ProductTypes));
            this._ShopAddresses = new EntitySet<ShopAddress>(new Action<ShopAddress>(this.attach_ShopAddresses), new Action<ShopAddress>(this.detach_ShopAddresses));
            this._User  = default(EntityRef<User>);
            this._Subscribers = new EntitySet<Subscriber>(new Action<Subscriber>(this.attach_Subscribers), new Action<Subscriber>(this.detach_Subscribers));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ShopId in the schema.
        /// </summary>
        [Column(Storage = "_ShopId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ShopId
        {
            get
            {
                return this._ShopId;
            }
            set
            {
                if (this._ShopId != value)
                {
                    this.OnShopIdChanging(value);
                    this.SendPropertyChanging("ShopId");
                    this._ShopId = value;
                    this.SendPropertyChanged("ShopId");
                    this.OnShopIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopName in the schema.
        /// </summary>
        [Column(Storage = "_ShopName", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string ShopName
        {
            get
            {
                return this._ShopName;
            }
            set
            {
                if (this._ShopName != value)
                {
                    this.OnShopNameChanging(value);
                    this.SendPropertyChanging("ShopName");
                    this._ShopName = value;
                    this.SendPropertyChanged("ShopName");
                    this.OnShopNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhoneNumber in the schema.
        /// </summary>
        [Column(Storage = "_PhoneNumber", DbType = "NUMERIC", UpdateCheck = UpdateCheck.Never)]
        public decimal? PhoneNumber
        {
            get
            {
                return this._PhoneNumber;
            }
            set
            {
                if (this._PhoneNumber != value)
                {
                    this.OnPhoneNumberChanging(value);
                    this.SendPropertyChanging("PhoneNumber");
                    this._PhoneNumber = value;
                    this.SendPropertyChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AlternateNumber in the schema.
        /// </summary>
        [Column(Storage = "_AlternateNumber", DbType = "NUMERIC", UpdateCheck = UpdateCheck.Never)]
        public decimal? AlternateNumber
        {
            get
            {
                return this._AlternateNumber;
            }
            set
            {
                if (this._AlternateNumber != value)
                {
                    this.OnAlternateNumberChanging(value);
                    this.SendPropertyChanging("AlternateNumber");
                    this._AlternateNumber = value;
                    this.SendPropertyChanged("AlternateNumber");
                    this.OnAlternateNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryRadius in the schema.
        /// </summary>
        [Column(Storage = "_DeliveryRadius", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? DeliveryRadius
        {
            get
            {
                return this._DeliveryRadius;
            }
            set
            {
                if (this._DeliveryRadius != value)
                {
                    this.OnDeliveryRadiusChanging(value);
                    this.SendPropertyChanging("DeliveryRadius");
                    this._DeliveryRadius = value;
                    this.SendPropertyChanged("DeliveryRadius");
                    this.OnDeliveryRadiusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Logo in the schema.
        /// </summary>
        [Column(Storage = "_Logo", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Logo
        {
            get
            {
                return this._Logo;
            }
            set
            {
                if (this._Logo != value)
                {
                    this.OnLogoChanging(value);
                    this.SendPropertyChanging("Logo");
                    this._Logo = value;
                    this.SendPropertyChanged("Logo");
                    this.OnLogoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CoverPhoto in the schema.
        /// </summary>
        [Column(Storage = "_CoverPhoto", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string CoverPhoto
        {
            get
            {
                return this._CoverPhoto;
            }
            set
            {
                if (this._CoverPhoto != value)
                {
                    this.OnCoverPhotoChanging(value);
                    this.SendPropertyChanging("CoverPhoto");
                    this._CoverPhoto = value;
                    this.SendPropertyChanged("CoverPhoto");
                    this.OnCoverPhotoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Storage = "_CategoryId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    if (this._Category.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging("CategoryId");
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsCompleted in the schema.
        /// </summary>
        [Column(Storage = "_IsCompleted", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? IsCompleted
        {
            get
            {
                return this._IsCompleted;
            }
            set
            {
                if (this._IsCompleted != value)
                {
                    this.OnIsCompletedChanging(value);
                    this.SendPropertyChanging("IsCompleted");
                    this._IsCompleted = value;
                    this.SendPropertyChanged("IsCompleted");
                    this.OnIsCompletedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_ShopDetail", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
        public Category Category
        {
            get
            {
                return this._Category.Entity;
            }
            set
            {
                Category previousValue = this._Category.Entity;
                if ((previousValue != value) || (this._Category.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Category");
                    if (previousValue != null)
                    {
                        this._Category.Entity = null;
                        previousValue.ShopDetails.Remove(this);
                    }
                    this._Category.Entity = value;
                    if (value != null)
                    {
                        this._CategoryId = value.CategoryId;
                        value.ShopDetails.Add(this);
                    }
                    else
                    {
                        this._CategoryId = default(int?);
                    }
                    this.SendPropertyChanged("Category");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderMstrs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ShopDetail_OrderMstr", Storage="_OrderMstrs", ThisKey="ShopId", OtherKey="ShopId", DeleteRule="NO ACTION")]
        public EntitySet<OrderMstr> OrderMstrs
        {
            get
            {
                return this._OrderMstrs;
            }
            set
            {
                this._OrderMstrs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ProductTypes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ShopDetail_ProductType", Storage="_ProductTypes", ThisKey="ShopId", OtherKey="ShopId", DeleteRule="NO ACTION")]
        public EntitySet<ProductType> ProductTypes
        {
            get
            {
                return this._ProductTypes;
            }
            set
            {
                this._ProductTypes.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ShopAddresses in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ShopDetail_ShopAddress", Storage="_ShopAddresses", ThisKey="ShopId", OtherKey="ShopId", DeleteRule="NO ACTION")]
        public EntitySet<ShopAddress> ShopAddresses
        {
            get
            {
                return this._ShopAddresses;
            }
            set
            {
                this._ShopAddresses.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_ShopDetail", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.ShopDetails.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._UserId = value.UserId;
                        value.ShopDetails.Add(this);
                    }
                    else
                    {
                        this._UserId = default(int?);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Subscribers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ShopDetail_Subscriber", Storage="_Subscribers", ThisKey="ShopId", OtherKey="ShopId", DeleteRule="NO ACTION")]
        public EntitySet<Subscriber> Subscribers
        {
            get
            {
                return this._Subscribers;
            }
            set
            {
                this._Subscribers.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrderMstrs(OrderMstr entity)
        {
            this.SendPropertyChanging("OrderMstrs");
            entity.ShopDetail = this;
        }
    
        private void detach_OrderMstrs(OrderMstr entity)
        {
            this.SendPropertyChanging("OrderMstrs");
            entity.ShopDetail = null;
        }

        private void attach_ProductTypes(ProductType entity)
        {
            this.SendPropertyChanging("ProductTypes");
            entity.ShopDetail = this;
        }
    
        private void detach_ProductTypes(ProductType entity)
        {
            this.SendPropertyChanging("ProductTypes");
            entity.ShopDetail = null;
        }

        private void attach_ShopAddresses(ShopAddress entity)
        {
            this.SendPropertyChanging("ShopAddresses");
            entity.ShopDetail = this;
        }
    
        private void detach_ShopAddresses(ShopAddress entity)
        {
            this.SendPropertyChanging("ShopAddresses");
            entity.ShopDetail = null;
        }

        private void attach_Subscribers(Subscriber entity)
        {
            this.SendPropertyChanging("Subscribers");
            entity.ShopDetail = this;
        }
    
        private void detach_Subscribers(Subscriber entity)
        {
            this.SendPropertyChanging("Subscribers");
            entity.ShopDetail = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.Subscriber in the schema.
    /// </summary>
    [Table(Name = @"dbo.Subscriber")]
    public partial class Subscriber : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _SubscriberId;

        private int? _OfficeId;

        private int? _ShopId;

        private int? _Status;
        #pragma warning restore 0649

        private EntityRef<OfficeDetail> _OfficeDetail;

        private EntityRef<ShopDetail> _ShopDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnSubscriberIdChanging(int value);
        partial void OnSubscriberIdChanged();
        partial void OnOfficeIdChanging(int? value);
        partial void OnOfficeIdChanged();
        partial void OnShopIdChanging(int? value);
        partial void OnShopIdChanged();
        partial void OnStatusChanging(int? value);
        partial void OnStatusChanged();
        #endregion

        public Subscriber()
        {
            this._OfficeDetail  = default(EntityRef<OfficeDetail>);
            this._ShopDetail  = default(EntityRef<ShopDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SubscriberId in the schema.
        /// </summary>
        [Column(Storage = "_SubscriberId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int SubscriberId
        {
            get
            {
                return this._SubscriberId;
            }
            set
            {
                if (this._SubscriberId != value)
                {
                    this.OnSubscriberIdChanging(value);
                    this.SendPropertyChanging("SubscriberId");
                    this._SubscriberId = value;
                    this.SendPropertyChanged("SubscriberId");
                    this.OnSubscriberIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeId in the schema.
        /// </summary>
        [Column(Storage = "_OfficeId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OfficeId
        {
            get
            {
                return this._OfficeId;
            }
            set
            {
                if (this._OfficeId != value)
                {
                    if (this._OfficeDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOfficeIdChanging(value);
                    this.SendPropertyChanging("OfficeId");
                    this._OfficeId = value;
                    this.SendPropertyChanged("OfficeId");
                    this.OnOfficeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopId in the schema.
        /// </summary>
        [Column(Storage = "_ShopId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ShopId
        {
            get
            {
                return this._ShopId;
            }
            set
            {
                if (this._ShopId != value)
                {
                    if (this._ShopDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShopIdChanging(value);
                    this.SendPropertyChanging("ShopId");
                    this._ShopId = value;
                    this.SendPropertyChanged("ShopId");
                    this.OnShopIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="OfficeDetail_Subscriber", Storage="_OfficeDetail", ThisKey="OfficeId", OtherKey="OfficeId", IsForeignKey=true)]
        public OfficeDetail OfficeDetail
        {
            get
            {
                return this._OfficeDetail.Entity;
            }
            set
            {
                OfficeDetail previousValue = this._OfficeDetail.Entity;
                if ((previousValue != value) || (this._OfficeDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("OfficeDetail");
                    if (previousValue != null)
                    {
                        this._OfficeDetail.Entity = null;
                        previousValue.Subscribers.Remove(this);
                    }
                    this._OfficeDetail.Entity = value;
                    if (value != null)
                    {
                        this._OfficeId = value.OfficeId;
                        value.Subscribers.Add(this);
                    }
                    else
                    {
                        this._OfficeId = default(int?);
                    }
                    this.SendPropertyChanged("OfficeDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ShopDetail_Subscriber", Storage="_ShopDetail", ThisKey="ShopId", OtherKey="ShopId", IsForeignKey=true)]
        public ShopDetail ShopDetail
        {
            get
            {
                return this._ShopDetail.Entity;
            }
            set
            {
                ShopDetail previousValue = this._ShopDetail.Entity;
                if ((previousValue != value) || (this._ShopDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ShopDetail");
                    if (previousValue != null)
                    {
                        this._ShopDetail.Entity = null;
                        previousValue.Subscribers.Remove(this);
                    }
                    this._ShopDetail.Entity = value;
                    if (value != null)
                    {
                        this._ShopId = value.ShopId;
                        value.Subscribers.Add(this);
                    }
                    else
                    {
                        this._ShopId = default(int?);
                    }
                    this.SendPropertyChanged("ShopDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.User in the schema.
    /// </summary>
    [Table(Name = @"dbo.[User]")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserId;

        private string _EmailId;

        private string _Password;

        private int? _RoleId;
        #pragma warning restore 0649

        private EntitySet<Employee> _Employees;

        private EntitySet<OfficeDetail> _OfficeDetails;

        private EntityRef<Role> _Role;

        private EntitySet<ShopDetail> _ShopDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnEmailIdChanging(string value);
        partial void OnEmailIdChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnRoleIdChanging(int? value);
        partial void OnRoleIdChanged();
        #endregion

        public User()
        {
            this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
            this._OfficeDetails = new EntitySet<OfficeDetail>(new Action<OfficeDetail>(this.attach_OfficeDetails), new Action<OfficeDetail>(this.detach_OfficeDetails));
            this._Role  = default(EntityRef<Role>);
            this._ShopDetails = new EntitySet<ShopDetail>(new Action<ShopDetail>(this.attach_ShopDetails), new Action<ShopDetail>(this.detach_ShopDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmailId in the schema.
        /// </summary>
        [Column(Storage = "_EmailId", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string EmailId
        {
            get
            {
                return this._EmailId;
            }
            set
            {
                if (this._EmailId != value)
                {
                    this.OnEmailIdChanging(value);
                    this.SendPropertyChanging("EmailId");
                    this._EmailId = value;
                    this.SendPropertyChanged("EmailId");
                    this.OnEmailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Storage = "_Password", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleId in the schema.
        /// </summary>
        [Column(Storage = "_RoleId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? RoleId
        {
            get
            {
                return this._RoleId;
            }
            set
            {
                if (this._RoleId != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRoleIdChanging(value);
                    this.SendPropertyChanging("RoleId");
                    this._RoleId = value;
                    this.SendPropertyChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Employee", Storage="_Employees", ThisKey="UserId", OtherKey="UserId", DeleteRule="NO ACTION")]
        public EntitySet<Employee> Employees
        {
            get
            {
                return this._Employees;
            }
            set
            {
                this._Employees.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_OfficeDetail", Storage="_OfficeDetails", ThisKey="UserId", OtherKey="UserId", DeleteRule="NO ACTION")]
        public EntitySet<OfficeDetail> OfficeDetails
        {
            get
            {
                return this._OfficeDetails;
            }
            set
            {
                this._OfficeDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Role");
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.Users.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._RoleId = value.RoleId;
                        value.Users.Add(this);
                    }
                    else
                    {
                        this._RoleId = default(int?);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShopDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_ShopDetail", Storage="_ShopDetails", ThisKey="UserId", OtherKey="UserId", DeleteRule="NO ACTION")]
        public EntitySet<ShopDetail> ShopDetails
        {
            get
            {
                return this._ShopDetails;
            }
            set
            {
                this._ShopDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Employees(Employee entity)
        {
            this.SendPropertyChanging("Employees");
            entity.User = this;
        }
    
        private void detach_Employees(Employee entity)
        {
            this.SendPropertyChanging("Employees");
            entity.User = null;
        }

        private void attach_OfficeDetails(OfficeDetail entity)
        {
            this.SendPropertyChanging("OfficeDetails");
            entity.User = this;
        }
    
        private void detach_OfficeDetails(OfficeDetail entity)
        {
            this.SendPropertyChanging("OfficeDetails");
            entity.User = null;
        }

        private void attach_ShopDetails(ShopDetail entity)
        {
            this.SendPropertyChanging("ShopDetails");
            entity.User = this;
        }
    
        private void detach_ShopDetails(ShopDetail entity)
        {
            this.SendPropertyChanging("ShopDetails");
            entity.User = null;
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.UserRefresh in the schema.
    /// </summary>
    [Table(Name = @"dbo.UserRefresh")]
    public partial class UserRefresh : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserRTokenId;

        private string _UserEmailId;

        private int? _RefreshTokenId;
        #pragma warning restore 0649

        private EntityRef<RefreshToken> _RefreshToken;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserRTokenIdChanging(int value);
        partial void OnUserRTokenIdChanged();
        partial void OnUserEmailIdChanging(string value);
        partial void OnUserEmailIdChanged();
        partial void OnRefreshTokenIdChanging(int? value);
        partial void OnRefreshTokenIdChanged();
        #endregion

        public UserRefresh()
        {
            this._RefreshToken  = default(EntityRef<RefreshToken>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserRTokenId in the schema.
        /// </summary>
        [Column(Storage = "_UserRTokenId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserRTokenId
        {
            get
            {
                return this._UserRTokenId;
            }
            set
            {
                if (this._UserRTokenId != value)
                {
                    this.OnUserRTokenIdChanging(value);
                    this.SendPropertyChanging("UserRTokenId");
                    this._UserRTokenId = value;
                    this.SendPropertyChanged("UserRTokenId");
                    this.OnUserRTokenIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserEmailId in the schema.
        /// </summary>
        [Column(Storage = "_UserEmailId", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string UserEmailId
        {
            get
            {
                return this._UserEmailId;
            }
            set
            {
                if (this._UserEmailId != value)
                {
                    this.OnUserEmailIdChanging(value);
                    this.SendPropertyChanging("UserEmailId");
                    this._UserEmailId = value;
                    this.SendPropertyChanged("UserEmailId");
                    this.OnUserEmailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RefreshTokenId in the schema.
        /// </summary>
        [Column(Storage = "_RefreshTokenId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? RefreshTokenId
        {
            get
            {
                return this._RefreshTokenId;
            }
            set
            {
                if (this._RefreshTokenId != value)
                {
                    if (this._RefreshToken.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRefreshTokenIdChanging(value);
                    this.SendPropertyChanging("RefreshTokenId");
                    this._RefreshTokenId = value;
                    this.SendPropertyChanged("RefreshTokenId");
                    this.OnRefreshTokenIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RefreshToken in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RefreshToken_UserRefresh", Storage="_RefreshToken", ThisKey="RefreshTokenId", OtherKey="RefreshTokenId", IsForeignKey=true)]
        public RefreshToken RefreshToken
        {
            get
            {
                return this._RefreshToken.Entity;
            }
            set
            {
                RefreshToken previousValue = this._RefreshToken.Entity;
                if ((previousValue != value) || (this._RefreshToken.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("RefreshToken");
                    if (previousValue != null)
                    {
                        this._RefreshToken.Entity = null;
                        previousValue.UserRefreshes.Remove(this);
                    }
                    this._RefreshToken.Entity = value;
                    if (value != null)
                    {
                        this._RefreshTokenId = value.RefreshTokenId;
                        value.UserRefreshes.Add(this);
                    }
                    else
                    {
                        this._RefreshTokenId = default(int?);
                    }
                    this.SendPropertyChanged("RefreshToken");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
